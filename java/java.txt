标识符：类的名字(字符串)，类名的单个字母是字符
标识符命名规则：
·可以由字母、数字、下划线(_)和美元($)组成，不能以数字开头
·严格区分大小写
·不能是Java关键字和保留字
·命名最好能反映出其作用

关键字：

变量：
·包含三个元素：变量类型，变量名和变量值
·命名规则：
··满足标识符命名规则
··驼峰式命名规则
··尽量简单，做到见名知意
··长度没有限制
··满足Pascal命名法规范
变量声明：
·格式：数据类型 变量名;
·例:int n;
long count;
赋值：“=”赋值，int n =3;赋值并初始化


数据类型：
·基本数据类型
··数值型
···整数byte(字节型)\short(短整型)\int(整型)\long(长整型)
····整型字面值：
	十进制
	八进制：以0开头，包括0~7的数字，如037，056
	十六进制：以0x或0X开头，包括0~9的数字，及字母a-f,A-F,如0x12,0xabcf,0XABCEF
···浮点数float(单精度浮点型)\double(双精度浮点型)
浮点型字面值：124.42d或124.8D,float类型需要在字面值后面加f或F,23.3f
··字符型（char）
···字符型字面值：用单引号内的单个字符表示'a','b','$',定义：cha a='a';
··布尔型（boolean）
···布尔型字面值：boolean b = true;
·引用数据类型
·类(class)
·接口(interface)
·数组

类型转换：
·自动类型转换(隐式类型转换)：
·强制类型转换：(强制转换类型)值

常量

运算符
·表达式：由操作数和运算符组成
·算术运算符：+，-，*，/，++，--
·赋值运算符：变量=表达式;复合赋值运算符：+=，-=，*=，/=，%=
·关系运算符：if,else if比较的结果是布尔值>,<,>=,<=,==,!=
·逻辑运算符
··与(&&或&)
··或(||或|)
··非(!)
·条件运算符(三目运算符)
布尔表达式?表达式1：表达式2

·位运算符

流程控制
·选择结构
-if结构，if-else结构
-多重if
-嵌套if
-switch结构
·循环结构
-while,do-while,for
-循环嵌套
-continue,break

程序调试（F11进行debug）F5跳转到对应的方法里进行调试，F7返回到调入处的方法。
1.设置断点
2.执行调试
3.进行单步调试F6
4.F8从一个断点处跳到下一个断点处

数组：相同类型的数据按顺序组成的一种引用数据类型
-数组
·声明：1.数据类型[]数组名; int[] marry;2.数据类型 数组名[]; int marry[];
·创建:1.数组名 =new 数据类型[数组长度]int[] arr; arr = new int[10];创建一个长度为10的数组；2.int[] arr =new int[10];
·初始化:声明数组的同时给数组赋值，叫做数据的初始化。
int[] arr = {1,2,3,4,5,6,7,8,9,10};
·语法格式：
数组名[下标];注意:下标从0开始
-一维数组
增强型for循环：for(int n:intArray){}

冒泡排序

方法；
·声明和调用
-访问修饰符 返回类型 方法名(参数列表){
	方法体
}
方法重载：方法名相同,参数列表不同

可变参数

类和对象：
-类是模子，确定对象将会拥有的特征(属性)和行为(方法)
-对象是类的实例表现
-类是对象的类型
-对象是特定类型的数据
-匿名对象进行方法调用new Cat().run()
-需要多次访问同一对象时，必须进行声明
-同一作用范围内，不能定义同名对象
-可以同时声明多个引用，用逗号分隔。Cat one,two;one = new Cat(();two=new Cat();

构造方法(构造函数，构造器)
1.构造方法与类同名且没有返回值
2.语句格式public 构造方法名(){//初始化代码}
3.只能在对象实例化的时候调用
4.当没有指定构造方法时，系统会自动添加无参的构造方法
5.当有指定构造方式，无论是有参、无参的构造方法，都不会自动添加无参的构造方法
6.一个类中可以有多个构造方法

this：当前对象的默认引用
this的使用
-调用成员方法：this.eat();
-调用重载的构造方法：this();必须放在构造方法的第一条


属性和方法：
-属性：对象具有的各种静态特征
-"对象有什么"
-方法：对象具有的各种动态行为

封装：
·将类的某些信息隐藏在类内部，不允许外部程序直接访问
·通过该类提供的方法来实现对隐藏信息的操作和访问
·隐藏对象的信息
·留出访问的接口
特点：
1.只能通过规定的放啊访问数据
2.隐藏类的实例细节，方便修改和实现

static:表示的静态成员，类成员
1.类对象共享
2.类加载时产生，销毁时释放，生命周期长
static+方法：类方法，静态方法
static+属性：类属性，静态属性
静态成员访问方法：1.对象.成员；2.类.成员
静态方法中不能直接访问非静态成员，只能直接调用静态成员

普通代码块：顺序执行，先出现，先执行
构造代码块：创建对象时调用，优先于构造方法执行
静态代码块：类加载时调用，优先于构造代码块执行


继承
特点：1.利用代码复用；2.缩短开发周期
·一种类与类之间的关系
·使用已存在的类的定义作为基础建立新类
·新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类
·满足"A is a B"的关系就可以形成继承关系
继承的实现extends

方法重写
·在子类中定义
·方法名
·参数类型、顺序、个数

super(父类对象的引用)
·访问父类的成员方法super.print();
·访问父类属性super.name;
·访问父类构造方法super();
-子类的构造的过程中必须调用其父类的构造方法
-如果子类的构造方法中没有显式标注，则系统默认调用父类无参的构造方法。
-如果子类的构造方法中既没有显式标注，则父类中没有无参的构造方法，则编译出错
-使用super调用父类指定构造方法，必须在子类的构造方法的第一行


继承后的初始化顺序：父类静态成员-子类静态成员-父类对象构造-子类对象构造


Object类
-Object类是所有类的父类
-一个类中没有使用extends关键字明确标识继承关系，则默认继承Object类(包括数组)
-Java中的每个类都可以使用Object中定义的方法
equals:判断调用equals方法的引用和它传进来的参数对象的两个对象的引用是否一致，是否指向一块内存地址。  
final:final class:该类没有子类
	final 方法：该方法不允许被子类重写；final修饰的方法可以被继承；不能用来修饰构造方法
	final方法局部变量：只要在具体被使用之前进行赋值即可，一旦赋值不允许被修改。
	final类成员属性：赋值过程：1.定义直接初始化2.构造方法3.构造代码块
	基本数据类型的变量：初始赋值之后不能更改
	引用类型的变量：初始化之后不能再指向另一个对象，但对象的内容是可变的
	
	可配合static使用

注解
可以声明在包、类、属性、方法、局部变量、方法参数等的前面，用来对这些元素进行说明、注释
按照运行机制分：
源码注解：注解只在源码阶段保留，在编译阶段会被抛弃掉；
编译时注解：注解会在编译时期保留，在加载class文件时会被抛弃；
运行时注解：在运行阶段还起作用，甚至会影响运行逻辑的注解
按照来源分：
来自JDK的注解，来自第三方的注解，我们自己定义的注解

设计模式
针对场景总结的一些好的解决方案
创建型模式：工厂方式模式，建造者模式，抽象工厂模式，原型模式，单例模式
结构型模式：桥接模式，代理模式，享元模式，外观模式，装饰器模式，组合模式，适配器模式
行为型模式：备忘录模式，解释器模式，命令模式，中介者模式，观察者模式，策略模式，状态模式，模板方式模式，访问者模式，迭代子模式，责任链模式

单例模式
目的：使得类的一个对象成为该类系统中的唯一实例
定义：一个类有且仅有一个实例，并且自行实例化向整个系统提供
实现：1.只提供私有的构造方法2.含有一个该类的静态私有对象3.提供一个静态的公有方法用于创建、获取静态私有对象

多态
意味着允许不同类的对象对同一消息做出不同的响应
编译时多态：设计时多态方法重载
运行时多态：程序运行时动态决定调用哪个方法
必要条件：满足继承关系，父类引用指向子类对象
instanceof:判断左边对象是否是右边的实例，返回true/false

抽象类：不允许实例化，可以通过向上转型，指向子类实例
	应用场景：某个子类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。
	
	abstract修饰的类叫抽象类，不能直接实例化，只能被继承，可以通过向上转型完成对象实例
	abstract修饰的方法叫抽象方法，不需要具体实现
	包含抽象方法的类一定是抽象类。
	抽象类中可以没有抽象方法
3.

JAVA异常：
什么是异常：异常本质上是程序上的错误
	Throwable(根类):
		Error:是程序无法处理的错误，表示运行应用程序中较严重问题
		Exception：程序本身可以处理的异常，异常处理通常指针对这种类型异常的处理
异常处理机制为：抛出异常：throw throws
				捕捉异常：try-catch-finally
如何处理异常：try-catch-finally throw throws 自定义异常
异常链：
ArrayIndexOutOfBoundsException:数组下标越界异常;

包装类与基本数据类型
包装类与基本数据类型之间的转换
基本数据类型和字符串之间的转换

字符串：
1.如何创建String对象？
·String s1="imooc";
·String s2=new String();
·String s3=new String("imooc");
2.String对象的常用方法
==和equals的区别：地址和内容的区别
String的不可变性

字符串StringBuilder:
String和StringBuilder的区别：String具有不可变性，StringBuilder不具备
建议：当频繁操作字符串时，使用StringBuilder。
StringBuilder和StringBuffer:二者基本相似，StringBuffer是线程安全的，StringBuilder则没有，所以性能略高。

常见集合与应用
1.初识集合的应用
Java集合类是一种特有的工具类，可用于存储数量不等的对象
List集合体系及应用
-List集合代表一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引
-List集合允许使用重复元素，通过索引访问指定位置的元素
-List集合默认按元素的添加顺序设置元素的索引
-ArrayList的特点：1.基于数组实现的List类，是Java数组的有效替代品2.会自动对容量进行扩容，多数情况下无需指定最大长度3.ArrayList的数据在内存中是连续紧密存储的，基于数据访问速度快
-LinkList的特点：1.LinkList同时实现了List与Dequel两个接口 2.LinkList在保障有序、允许重复的前提下，也可以作为队列在对首、队尾快速追加数据 3.LinkList的数据在内存中是分散存储的，基于链表，拥有良好的数据插入速度，但数据访问速度低于ArrayList
-三种集合的遍历方式
1.for循环遍历
2.forEach方法遍历bookList.forEach(book -> {
			System.out.println(book);
		});
3.Iterator迭代器遍历Iterator<String> itr = bookList.iterator();
		while (itr.hasNext()) {
			String book = itr.next();// 提取出下一个元素，同时将指针向后用移动
			System.out.println(book);
		}


Set集合体系及应用
-Set集合代表一个元素无序、不可重复的集合
-Set集合与List集合使用方法基本相同，只是处理行为略有不同
-Set集合常用的实现类是：HashSet与TreeSet
-HashSet与TreeSet存储原理1.HashSet是Set接口的典型实现，大多数时候使用Set集合时就是使用这个实现类 2.HashSet按照Hash算法来决定集合元素的顺序，具有很好查找性能 3.当HashSet集合中存入一个元素时，根据该对象的hashCode值决定该对象在HashSet中的存储位置 4.Hash，一般翻译做散列，杂凑，或者译为哈希，是把任意长度的数据通过散列算法变换成固定的输出，该输出就是散列值
-LinkedHashSet:是HashSet的子类，除HashSet的特性外，它同时使用链表维护元素的次序，可以保障按插入顺序提取数据
-LinkedHashSet需要维护元素的插入顺序，因此性能略低于HashSet的性能
-迭代访问Set里的全部元素时将有很好的性能，因此它以链表来维护内部顺序
-TreeSet是SortedSet接口的实现类,TreeSet可以确保集合元素处于排序状态
-TreeSet采用红黑树的数据结构来存储集合元素
-TreeSet默认采用自然排序对元素升序排列，也可以实现Comparabl接口自定义排序方式

Map映射体系及应用
初识Map接口与HashMap:
-Map映射特点：Map用于保存具有映射关系的数据，每组映射都是Key(键)与Value(值)组合而成
-Key与Value可以是任何引用类型数据，但Key通常是String
-Map中的KEY不允许重复，重复为同一个Key设置Value，后者Value会覆盖前者Value
-HashMAp是map接口的典型实现类，对key进行无序存储
-HashMAp不能保证数据按存储顺序读取，且key全局唯一
-TreeMap存储key-value对时，根据key对节点进行排序
-TreeMap支持两种key排序：自然排序与定制排序
-与TreeSet相同，TreeMap也是基于红黑树结构对数据进行排序


泛型
-所谓泛型，就是允许在定义类、接口、方法时使用类型形参(泛型)，这个类型形参将在声明变量、创建对象、调用方法时动态地指定，进而让程序具备编译时检查能力
-自定义泛型类，需要在类名后加"<标识符>"
-<T>与<E>的区别：1.标识符的字母本身并无强制要求，常见写法有两种：<T>是Type单词的首字母，说明传入的是类型；<E>是Element元素的首字母，代表的是集合中的元素。
泛型方法的应用：

泛型通配符
使用泛型后的类型匹配问题
方法定义：public void doSth(List<Shape>shapeList)
//调用时使用Shape的子类Circle就会报错
List<Circle> circleList = new ArrayList<>;
obj.doSth(circleList);

<?>通配符与匹配范围
<?>代表所有类型均可传入，如下所示
方法定义：public void doSth(List<?>shapeList)
//调用时使用Shape的子类Circle不再报错
List<Circle> circleList = new ArrayList<>;
obj.doSth(circleList);
通过extends与super限定范围
extends关键字代表必须传入Shape或者子类才通过检查
//方法定义：
public void doSth(List<?extends Shape>shapeList)
super关键字代表必须传入Rectangle或者父类才能通过检查
//方法定义：
public void doSth(List<?super Rectangle>shapeList)

多线程
多线程的安全与应用
当一个程序执行进入内存运行时，即变成一个进程
进程的资源是彼此隔离的，其他进程不允许访问

线程是进程内执行的"任务"
线程是进程内一个"基本任务",每个线程都有自己的功能是CPU分配与调度的基本单位
一个进程内可以包含多个线程，反之一个线程只能隶属于某一个进程
进程内至少拥有一个"线程",这个线程叫"主线程"，主线程消亡则进程结束



应用Collections实现集合排序